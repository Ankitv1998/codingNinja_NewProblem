___________________________________________________________________________________________________________________________________________________________
Replace Characters Recursively
___________________________________________________________________________________________________________________________________________________________

Given an input string S and two characters c1 and c2, you need to replace every occurrence of character c1 with character c2 in the given string.
Do this recursively.
Input Format :
Line 1 : Input String S
Line 2 : Character c1 and c2 (separated by space)
Output Format :
Updated string
Constraints :
1 <= Length of String S <= 10^6
Sample Input :
abacd
a x
Sample Output :
xbxcd

___________________________________________________________________________________________________________________________________________________________

public class Solution {
    public static String replaceCharacter(String input, char c1, char c2) {
        // Base case: if the input string is empty, return an empty string
        if (input.length() == 0) {
            return "";
        }

        // Recursive case: check the first character of the input string
        char firstChar = input.charAt(0);
        String restOfTheString = input.substring(1);
        String replacedString = "";

        // If the first character matches c1, replace it with c2
        if (firstChar == c1) {
            replacedString += c2;
        } else {
            replacedString += firstChar;
        }

        // Recursively call replaceCharacter on the rest of the string
        return replacedString + replaceCharacter(restOfTheString, c1, c2);
    }
}

___________________________________________________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________________________________________________
Remove Duplicates Recursively
___________________________________________________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________________________________________________

Given a string S, remove consecutive duplicates from it recursively.
Input Format :
String S
Output Format :
Output string
Constraints :
1 <= |S| <= 10^3
where |S| represents the length of string
Sample Input 1 :
aabccba
Sample Output 1 :
abcba
Sample Input 2 :
xxxyyyzwwzzz
Sample Output 2 :
xyzwz  

___________________________________________________________________________________________________________________________________________________________
public class Solution {
    public static String removeConsecutiveDuplicates(String s) {
        // Base case: if the string is empty or has only one character, return it
        if (s.length() <= 1) {
            return s;
        }

        // Recursive case: check the first two characters of the string
        char firstChar = s.charAt(0);
        String restOfTheString = s.substring(1);

        // If the first two characters are the same, recursively call removeConsecutiveDuplicates on the rest of the string
        if (firstChar == s.charAt(1)) {
            return removeConsecutiveDuplicates(restOfTheString);
        }

        // If the first two characters are different, append the first character to the result string and recursively call removeConsecutiveDuplicates on the rest of the string
        return firstChar + removeConsecutiveDuplicates(restOfTheString);
    }
}

___________________________________________________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________________________________________________
Merge sort-Problem Statement
___________________________________________________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________________________________________________
Merge Sort - Problem Statement
Send Feedback
Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 
___________________________________________________________________________________________________________________________________________________________


public class solution {

	public static void mergeSort(int[] input) {
		if(input == null || input.length == 0) {
			return;
		}
		int[] temp = new int[input.length];
		mergeSortHelper(input, temp, 0, input.length - 1);
	}

	private static void mergeSortHelper(int[] input, int[] temp, int start, int end) {
		if(start >= end) {
			return;
		}
		int mid = start + (end - start) / 2;
		mergeSortHelper(input, temp, start, mid);
		mergeSortHelper(input, temp, mid + 1, end);
		merge(input, temp, start, mid, end);
	}

	private static void merge(int[] input, int[] temp, int start, int mid, int end) {
		int i = start;
		int j = mid + 1;
		int k = start;
		while(i <= mid && j <= end) {
			if(input[i] <= input[j]) {
				temp[k] = input[i];
				i++;
			} else {
				temp[k] = input[j];
				j++;
			}
			k++;
		}
		while(i <= mid) {
			temp[k] = input[i];
			i++;
			k++;
		}
		while(j <= end) {
			temp[k] = input[j];
			j++;
			k++;
		}
		for(k = start; k <= end; k++) {
			input[k] = temp[k];
		}
	}
}

___________________________________________________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________________________________________________

Quick Sort-Problem Statement
___________________________________________________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________________________________________________
Quick Sort - Problem Statement
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 

___________________________________________________________________________________________________________________________________________________________

public class Solution {
    
    public static void quickSort(int[] input) {
        quickSort(input, 0, input.length - 1);
    }
    
    private static void quickSort(int[] input, int start, int end) {
        if (start >= end) {
            return;
        }
        int pivotIndex = partition(input, start, end);
        quickSort(input, start, pivotIndex - 1);
        quickSort(input, pivotIndex + 1, end);
    }
    
    private static int partition(int[] input, int start, int end) {
        int pivot = input[start];
        int i = start + 1;
        int j = end;
        while (i <= j) {
            if (input[i] <= pivot) {
                i++;
            } else if (input[j] > pivot) {
                j--;
            } else {
                swap(input, i, j);
                i++;
                j--;
            }
        }
        swap(input, start, j);
        return j;
    }
    
    private static void swap(int[] input, int i, int j) {
        int temp = input[i];
        input[i] = input[j];
        input[j] = temp;
    }
    
}

___________________________________________________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________________________________________________

Tower of Hanoi - Problem Statement
___________________________________________________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________________________________________________

Tower Of Hanoi - Problem Statement
Send Feedback
Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using third rod (say auxiliary). The rules are :
1) Only one disk can be moved at a time.
2) A disk can be moved only if it is on the top of a rod.
3) No disk can be placed on the top of a smaller disk.
Print the steps required to move n disks from source rod to destination rod.
Source Rod is named as 'a', auxiliary rod as 'b' and destination rod as 'c'.
Input Format :
Integer n
Output Format :
Steps in different lines (in one line print source and destination rod name separated by space)
Constraints :
0 <= n <= 20
Sample Input 1 :
2
Sample Output 1 :
a b
a c
b c
Sample Input 2 :
3
Sample Output 2 :
a c
a b
c b
a c
b a
b c
a c

___________________________________________________________________________________________________________________________________________________________
public class solution {

	public static void towerOfHanoi(int disks, char source, char auxiliary, char destination) {
		if (disks == 1) {
			System.out.println(source + " " + destination);
			return;
		}
		towerOfHanoi(disks - 1, source, destination, auxiliary);
		System.out.println(source + " " + destination);
		towerOfHanoi(disks - 1, auxiliary, source, destination);
	}
	
}

 /*
 Explanation:

The towerOfHanoi function takes four parameters - 
the number of disks, and the three rod names.

If there is only one disk, it is moved directly from 
the source rod to the destination rod.

If there are more than one disk, the function is called 
recursively to move the top disks - 1 disks from the source rod
 to the auxiliary rod, using the destination rod as the temporary rod.
  Once this is done, the largest disk is moved from the source rod to the
   destination rod. Finally, the function is called recursively 
   to move the disks - 1 disks from the auxiliary rod to the 
   destination rod, using the source rod as the temporary rod.

At each step, the function prints the source and destination rod names.
 */
 ___________________________________________________________________________________________________________________________________________________________
 ___________________________________________________________________________________________________________________________________________________________
 
